LIBS_mod =
CFLAGS_mod = -pipe -Wall -g -fPIC -I.
LDFLAGS_mod = -shared

SRC_mod = $(wildcard modules/$(MODULE)/*.c)
OBJ_mod = $(patsubst %.c,.tmp/%.o,$(SRC_mod))
DEP_mod = $(patsubst %.c,.tmp/%.d,$(SRC_mod))
LIB_mod	= modules/$(MODULE).so

-include modules/$(MODULE)/Makefile.in

.PHONY: all clean

all: $(DEP_mod) $(LIB_mod)

clean:
	@echo "   CLEANMOD  $(MODULE)"
	rm -f .tmp/modules/$(MODULE)/*.d .tmp/modules/$(MODULE)/*.o $(LIB_mod)

# rule for creating final binary
$(LIB_mod): $(OBJ_mod)
	@echo "   LD        [$(MODULE)] $@"
	$(CC) $(LDFLAGS_mod) $(LIBS_mod) $(OBJ_mod) -o $(LIB_mod)

# rule for creating object files
$(OBJ_mod) : .tmp/modules/$(MODULE)/%.o : modules/$(MODULE)/%.c
	@echo "   CC        $(patsubst modules/$(MODULE)/%,[$(MODULE)] %,$(<:.c=.o))"
	@$(CC) $(CFLAGS_mod) -MMD -MF .tmp/$(<:.c=.d) -MT $@ -o $@ -c $<

# rule for creating dependency files
$(DEP_mod) : .tmp/modules/$(MODULE)/%.d : modules/$(MODULE)/%.c
	@mkdir -p .tmp/modules/$(MODULE)
	@echo "   DEP       $(patsubst modules/$(MODULE)/%,[$(MODULE)] %,$(<:.c=.d))"
	@$(CC) $(CFLAGS_mod) -MM -MT $(@:.d=.o) $< > $@

# include dependency files
ifneq ($(MAKECMDGOALS),clean)
-include $(DEP_mod)
endif

# vim: ft=make

